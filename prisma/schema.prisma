generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  phone     String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Відношення
  orders       Order[]
  accounts     Account[]
  sessions     Session[]
  payments     Payment[]
  courseAccess CourseAccess[] // ✅ Додано відношення до CourseAccess

  @@map("users")
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  amount    Float
  status    String
  createdAt DateTime @default(now())

  // Відношення
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  duration    String
  features    String[]
  createdAt   DateTime @default(now())
  level       String?

  // Відношення
  orders       Order[]
  payments     Payment[]
  courseAccess CourseAccess[] // ✅ Додано відношення до CourseAccess

  @@map("courses")
}

model Contact {
  id             String   @id @default(cuid())
  name           String
  email          String
  phone          String
  message        String
  status         String   @default("new")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  courseInterest String?

  @@map("contacts")
}

model Payment {
  id            String   @id @default(cuid())
  stripeId      String   @unique
  amount        Float
  currency      String   @default("uah")
  status        String // pending, succeeded, failed
  courseId      String
  customerEmail String
  customerName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  metadata      Json?

  // Відношення
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseAccess CourseAccess[] // ✅ Додано відношення до CourseAccess

  @@map("payments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CourseAccess {
  id            String   @id @default(cuid())
  userId        String?
  courseId      String
  customerEmail String
  customerName  String
  paymentId     String
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json?

  // Відношення
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("course_accesses")
}
