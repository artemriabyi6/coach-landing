import { NextRequest, NextResponse } from 'next/server'
import { contactFormSchema } from '../../../lib/validation'
import { createContact, getContacts } from '../../../lib/db'

// GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
export async function GET() {
  try {
    const contacts = await getContacts()
    
    return NextResponse.json(contacts, { status: 200 })
  } catch (error) {
    console.error('Error fetching contacts:', error)
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞—è–≤–æ–∫' },
      { status: 500 }
    )
  }
}

// POST - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    const validatedData = contactFormSchema.parse(body)
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const contact = await createContact(validatedData)
    
    console.log('üìù Contact form processed successfully:', contact.id)
    
    return NextResponse.json(
      { 
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞',
        contactId: contact.id
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error processing contact form:', error)
    
    return NextResponse.json(
      { 
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' 
      },
      { status: 400 }
    )
  }
}