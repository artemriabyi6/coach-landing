import { NextRequest, NextResponse } from 'next/server'
import { contactFormSchema } from '../../../lib/validation'
import { createContact } from '../../../lib/db'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('üì® Received contact form data:', body)
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    const validatedData = contactFormSchema.parse(body)
    console.log('‚úÖ Data validation passed')
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const contact = await createContact(validatedData)
    console.log('üíæ Contact saved to database:', contact.id)
    
    return NextResponse.json(
      { 
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞',
        contactId: contact.id
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error processing contact form:', error)
    
    // –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ª–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    if (error instanceof Error && error.name === 'ZodError') {
      console.error('üìã Validation errors:', error)
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' 
      },
      { status: 400 }
    )
  }
}