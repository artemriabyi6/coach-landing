import { NextRequest, NextResponse } from 'next/server'
import { updateContactStatus, deleteContact } from '../../../../lib/db'

interface RouteParams {
  params: Promise<{
    id: string
  }>
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
export async function PATCH(request: NextRequest, { params }: RouteParams) {
  try {
    const { id } = await params // ‚úÖ –î–æ–¥–∞—î–º–æ await
    console.log('üîÑ PATCH request for contact:', id)
    
    const body = await request.json()
    console.log('üì¶ Request body:', body)
    
    const { status } = body

    if (!status) {
      console.log('‚ùå Status is missing in request body')
      return NextResponse.json(
        { 
          success: false,
          error: 'Status is required' 
        },
        { status: 400 }
      )
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É
    const validStatuses = ['new', 'contacted', 'completed']
    if (!validStatuses.includes(status)) {
      console.log('‚ùå Invalid status:', status)
      return NextResponse.json(
        { 
          success: false,
          error: 'Invalid status. Must be one of: new, contacted, completed' 
        },
        { status: 400 }
      )
    }

    const contact = await updateContactStatus(id, status)
    
    return NextResponse.json(
      { 
        success: true,
        message: '–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ',
        contact 
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error in PATCH handler:', error)
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É' 
      },
      { status: 400 }
    )
  }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
export async function DELETE(request: NextRequest, { params }: RouteParams) {
  try {
    const { id } = await params // ‚úÖ –î–æ–¥–∞—î–º–æ await
    console.log('üóëÔ∏è DELETE request for contact:', id)
    
    await deleteContact(id)
    
    return NextResponse.json(
      { 
        success: true,
        message: '–ó–∞—è–≤–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ'
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error in DELETE handler:', error)
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏' 
      },
      { status: 400 }
    )
  }
}