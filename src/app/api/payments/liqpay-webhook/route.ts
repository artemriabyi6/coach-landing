import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '../../../../lib/db'
import { liqpayService } from '../../../../lib/liqpay'

// –¢–∏–ø–∏ –¥–ª—è –¥–∞–Ω–∏—Ö LiqPay
interface LiqPayWebhookData {
  order_id: string
  status: string
  amount: number
  currency: string
  transaction_id?: string
  liqpay_order_id?: string
  [key: string]: unknown // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
}

// –¢–∏–ø –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö, —Å—É–º—ñ—Å–Ω–∏–π –∑ Prisma Json
type PaymentMetadata = {
  liqpayTransactionId?: string
  liqpayOrderId?: string
  webhookReceivedAt: string
  [key: string]: unknown
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîî LiqPay webhook called')
    
    // LiqPay –Ω–∞–¥—Å–∏–ª–∞—î –¥–∞–Ω—ñ —è–∫ form-data
    const formData = await request.formData()
    const data = formData.get('data') as string
    const signature = formData.get('signature') as string

    console.log('üì¶ Raw webhook data:', { 
      data: data ? 'present' : 'missing', 
      signature: signature ? 'present' : 'missing' 
    })

    if (!data || !signature) {
      console.error('‚ùå Missing data or signature in LiqPay webhook')
      return NextResponse.json({ error: 'Missing data or signature' }, { status: 400 })
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å
    const isValidSignature = liqpayService.verifySignature(data, signature)
    if (!isValidSignature) {
      console.error('‚ùå Invalid LiqPay signature')
      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
    }

    // –î–µ–∫–æ–¥—É—î–º–æ –¥–∞–Ω—ñ
    const paymentData: LiqPayWebhookData = liqpayService.decodeParams(data)
    console.log('üì¶ Decoded LiqPay webhook data:', paymentData)

    const { order_id, status, transaction_id, liqpay_order_id } = paymentData

    if (!order_id) {
      console.error('‚ùå Missing order_id in webhook data')
      return NextResponse.json({ error: 'Missing order_id' }, { status: 400 })
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –≤ –±–∞–∑—ñ
    let paymentStatus = 'pending'
    
    switch (status) {
      case 'success':
      case 'sandbox': // –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
        paymentStatus = 'succeeded'
        break
      case 'failure':
      case 'error':
        paymentStatus = 'failed'
        break
      case 'wait_accept':
        paymentStatus = 'processing'
        break
      case 'wait_secure':
        paymentStatus = 'waiting_3ds'
        break
      case 'wait_lc':
        paymentStatus = 'waiting_funds'
        break
      case 'reversed':
        paymentStatus = 'refunded'
        break
      default:
        paymentStatus = status
    }

    console.log(`üîÑ Updating payment ${order_id} to status: ${paymentStatus}`)

    // –°—Ç–≤–æ—Ä—é—î–º–æ metadata –æ–±'—î–∫—Ç
    const metadata: PaymentMetadata = {
      ...paymentData,
      liqpayTransactionId: transaction_id,
      liqpayOrderId: liqpay_order_id,
      webhookReceivedAt: new Date().toISOString()
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞—Ç—ñ–∂ –≤ –±–∞–∑—ñ
    const updatedPayment = await prisma.payment.update({
      where: { stripeId: order_id },
      data: { 
        status: paymentStatus,
        updatedAt: new Date(),
        metadata: metadata as any // Prisma –ø–æ—Ç—Ä–µ–±—É—î any –¥–ª—è Json –ø–æ–ª—ñ–≤
      },
      include: {
        course: {
          select: {
            id: true,
            title: true
          }
        }
      }
    })

    console.log(`‚úÖ Payment ${order_id} updated to status: ${paymentStatus}`)

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤
    if (paymentStatus === 'succeeded') {
      await handleSuccessfulPayment(updatedPayment, paymentData)
    }

    return NextResponse.json({ 
      received: true, 
      status: 'processed',
      paymentId: order_id,
      paymentStatus: paymentStatus
    })

  } catch (error) {
    console.error('‚ùå LiqPay webhook processing error:', error)
    
    return NextResponse.json(
      { 
        error: 'Webhook processing failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

async function handleSuccessfulPayment(
  payment: any, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ any –¥–ª—è Prisma —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  paymentData: LiqPayWebhookData
): Promise<void> {
  try {
    console.log(`üéâ Handling successful payment for order: ${payment.stripeId}`)

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É –≤–∂–µ –Ω–∞–¥–∞–Ω–æ
    const existingAccess = await prisma.courseAccess.findFirst({
      where: {
        paymentId: payment.id
      }
    })

    if (existingAccess) {
      console.log(`‚ÑπÔ∏è Course access already exists for payment: ${payment.id}`)
      return
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É
    const courseAccess = await prisma.courseAccess.create({
      data: {
        userId: payment.userId,
        courseId: payment.courseId,
        customerEmail: payment.customerEmail,
        customerName: payment.customerName,
        paymentId: payment.id,
        expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 —Ä—ñ–∫
        metadata: {
          activatedAt: new Date().toISOString(),
          liqpayTransactionId: paymentData.transaction_id
        } as any // Prisma –ø–æ—Ç—Ä–µ–±—É—î any –¥–ª—è Json –ø–æ–ª—ñ–≤
      }
    })

    console.log(`‚úÖ Course access created: ${courseAccess.id} for ${payment.customerEmail}`)

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É:
    // - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    // - –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ Telegram –≥—Ä—É–ø–∏
    // - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å –≤ CRM
    // - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É

    // –ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    console.log(`üìß Would send confirmation email to: ${payment.customerEmail}`)
    console.log(`üíª Would activate course: ${payment.course?.title || 'Unknown'}`)

  } catch (error) {
    console.error('‚ùå Error handling successful payment:', error)
    // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ, —â–æ–± –Ω–µ –≤–ø–ª–∏–≤–∞—Ç–∏ –Ω–∞ –≤–µ–±—Ö—É–∫
  }
}

export async function GET() {
  return NextResponse.json({ 
    message: 'LiqPay webhook endpoint is working',
    timestamp: new Date().toISOString(),
    instructions: 'This endpoint should receive POST requests from LiqPay with form-data'
  })
}