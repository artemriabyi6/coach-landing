import { PrismaClient } from '@prisma/client'
import { ContactFormData, Contact } from '../types'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
export async function createContact(data: ContactFormData) {
  try {
    const contact = await prisma.contact.create({
      data: {
        name: data.name,
        email: data.email,
        phone: data.phone,
        message: data.message,
        courseInterest: data.course || null,  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ courseInterest
      },
    })
    console.log('‚úÖ Contact saved to database:', contact.id)
    return contact
  } catch (error) {
    console.error('‚ùå Error saving contact to database:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
export async function getContacts(): Promise<Contact[]> {
  try {
    const contacts = await prisma.contact.findMany({
      orderBy: { createdAt: 'desc' },
      take: 100
    })
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —Ç–∏–ø—É Contact
    return contacts.map(contact => ({
      id: contact.id,
      name: contact.name,
      email: contact.email,
      phone: contact.phone,
      message: contact.message,
      courseInterest: contact.courseInterest,
      status: contact.status, // ‚úÖ –¢–µ–ø–µ—Ä –ø–æ–ª–µ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–µ
      createdAt: contact.createdAt,
      updatedAt: contact.updatedAt
    }))
  } catch (error) {
    console.error('‚ùå Error fetching contacts:', error)
    return []
  }
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
export async function updateContactStatus(contactId: string, status: string) {
  try {
    console.log('üîÑ Updating contact status:', contactId, '‚Üí', status)
    
    const contact = await prisma.contact.update({
      where: { 
        id: contactId // ‚úÖ –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ contactId –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
      },
      data: { 
        status: status,
        updatedAt: new Date()
      }
    })
    
    console.log('‚úÖ Contact status updated successfully:', contact.id)
    return contact
  } catch (error) {
    console.error('‚ùå Error updating contact status:', error)
    throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`)
  }
}

// –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É
export async function deleteContact(contactId: string) {
  try {
    console.log('üóëÔ∏è Deleting contact:', contactId)
    
    await prisma.contact.delete({
      where: { 
        id: contactId // ‚úÖ –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ contactId –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
      }
    })
    
    console.log('‚úÖ Contact deleted successfully')
    return true
  } catch (error) {
    console.error('‚ùå Error deleting contact:', error)
    throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`)
  }
}