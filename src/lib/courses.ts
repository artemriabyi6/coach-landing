import { prisma } from './db'

export interface Course {
  id: string
  title: string
  description: string
  price: number
  duration: string
  level?: string
  features: string[]
  createdAt: Date
}

export interface CourseFilters {
  level?: string
  minPrice?: number
  maxPrice?: number
}

// –¢–∏–ø –¥–ª—è where —É–º–æ–≤–∏ Prisma
interface WhereClause {
  level?: string
  price?: {
    gte?: number
    lte?: number
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
export async function getAvailableCourses(filters?: CourseFilters): Promise<Course[]> {
  try {
    console.log('üìö Fetching courses from database...')
    
    const whereClause: WhereClause = {}

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ
    if (filters?.level) {
      whereClause.level = filters.level
    }

    if (filters?.minPrice !== undefined || filters?.maxPrice !== undefined) {
      whereClause.price = {}
      if (filters.minPrice !== undefined) {
        whereClause.price.gte = filters.minPrice
      }
      if (filters.maxPrice !== undefined) {
        whereClause.price.lte = filters.maxPrice
      }
    }

    const courses = await prisma.course.findMany({
      where: whereClause,
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      },
      orderBy: [
        { price: 'asc' },
        { createdAt: 'desc' }
      ]
    })

    console.log(`‚úÖ Found ${courses.length} courses`)

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    return courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }))

  } catch (error) {
    console.error('‚ùå Error fetching courses:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –∑–∞ ID
 */
export async function getCourseById(id: string): Promise<Course | null> {
  try {
    console.log(`üîç Fetching course by ID: ${id}`)

    const course = await prisma.course.findUnique({
      where: { id },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      }
    })

    if (!course) {
      console.log(`‚ùå Course not found with ID: ${id}`)
      return null
    }

    console.log(`‚úÖ Found course: ${course.title}`)

    return {
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }

  } catch (error) {
    console.error(`‚ùå Error fetching course by ID ${id}:`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –∑–∞ —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
 */
export async function getCoursesByLevel(level: string): Promise<Course[]> {
  try {
    console.log(`üìö Fetching courses by level: ${level}`)

    const courses = await prisma.course.findMany({
      where: { level },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      },
      orderBy: { price: 'asc' }
    })

    console.log(`‚úÖ Found ${courses.length} courses with level: ${level}`)

    return courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }))

  } catch (error) {
    console.error(`‚ùå Error fetching courses by level ${level}:`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –∑–∞ —Ä—ñ–≤–Ω–µ–º')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —Ü—ñ–Ω
 */
export async function getCoursesByPriceRange(minPrice: number, maxPrice: number): Promise<Course[]> {
  try {
    console.log(`üí∞ Fetching courses in price range: ${minPrice} - ${maxPrice}`)

    const courses = await prisma.course.findMany({
      where: {
        price: {
          gte: minPrice,
          lte: maxPrice
        }
      },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      },
      orderBy: { price: 'asc' }
    })

    console.log(`‚úÖ Found ${courses.length} courses in price range`)

    return courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }))

  } catch (error) {
    console.error(`‚ùå Error fetching courses by price range:`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ü—ñ–Ω')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä—ñ–≤–Ω—ñ –∫—É—Ä—Å—ñ–≤ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
 */
export async function getCourseLevels(): Promise<string[]> {
  try {
    console.log('üè∑Ô∏è Fetching unique course levels...')

    const courses = await prisma.course.findMany({
      select: {
        level: true
      },
      distinct: ['level']
    })

    const levels = courses
      .map(course => course.level)
      .filter((level): level is string => level !== null && level !== undefined)

    console.log(`‚úÖ Found ${levels.length} unique levels:`, levels)

    return levels

  } catch (error) {
    console.error('‚ùå Error fetching course levels:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä—ñ–≤–Ω—ñ –∫—É—Ä—Å—ñ–≤')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∫—É—Ä—Å—ñ–≤
 */
export async function getPriceRange(): Promise<{ min: number; max: number }> {
  try {
    console.log('üíµ Fetching price range...')

    const [minResult, maxResult] = await Promise.all([
      prisma.course.aggregate({
        _min: {
          price: true
        }
      }),
      prisma.course.aggregate({
        _max: {
          price: true
        }
      })
    ])

    const minPrice = minResult._min.price || 0
    const maxPrice = maxResult._max.price || 0

    console.log(`‚úÖ Price range: ${minPrice} - ${maxPrice}`)

    return {
      min: minPrice,
      max: maxPrice
    }

  } catch (error) {
    console.error('‚ùå Error fetching price range:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω')
  }
}

/**
 * –ü–æ—à—É–∫ –∫—É—Ä—Å—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
 */
export async function searchCourses(query: string): Promise<Course[]> {
  try {
    console.log(`üîé Searching courses with query: "${query}"`)

    const courses = await prisma.course.findMany({
      where: {
        OR: [
          {
            title: {
              contains: query,
              mode: 'insensitive'
            }
          },
          {
            description: {
              contains: query,
              mode: 'insensitive'
            }
          }
        ]
      },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      },
      orderBy: [
        { title: 'asc' },
        { price: 'asc' }
      ]
    })

    console.log(`‚úÖ Found ${courses.length} courses matching query`)

    return courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }))

  } catch (error) {
    console.error(`‚ùå Error searching courses with query "${query}":`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫ –∫—É—Ä—Å—ñ–≤')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –∞–±–æ –∑ –ø–µ–≤–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é)
 */
export async function getPopularCourses(limit: number = 3): Promise<Course[]> {
  try {
    console.log(`üî• Fetching ${limit} popular courses...`)

    // –ù–∞—Ä–∞–∑—ñ –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–æ–¥–∞–Ω—ñ –∫—É—Ä—Å–∏
    const courses = await prisma.course.findMany({
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: limit
    })

    console.log(`‚úÖ Found ${courses.length} popular courses`)

    return courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      price: course.price,
      duration: course.duration,
      level: course.level || undefined,
      features: course.features || [],
      createdAt: course.createdAt,
    }))

  } catch (error) {
    console.error('‚ùå Error fetching popular courses:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏')
  }
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
 */
export async function updateCourse(id: string, data: Partial<Omit<Course, 'id' | 'createdAt'>>): Promise<Course> {
  try {
    console.log(`üîÑ Updating course: ${id}`)

    const updatedCourse = await prisma.course.update({
      where: { id },
      data: {
        title: data.title,
        description: data.description,
        price: data.price,
        duration: data.duration,
        level: data.level,
        features: data.features,
      },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      }
    })

    console.log(`‚úÖ Course updated: ${updatedCourse.title}`)

    return {
      id: updatedCourse.id,
      title: updatedCourse.title,
      description: updatedCourse.description,
      price: updatedCourse.price,
      duration: updatedCourse.duration,
      level: updatedCourse.level || undefined,
      features: updatedCourse.features || [],
      createdAt: updatedCourse.createdAt,
    }

  } catch (error) {
    console.error(`‚ùå Error updating course ${id}:`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å')
  }
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫—É—Ä—Å (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
 */
export async function createCourse(data: Omit<Course, 'id' | 'createdAt'>): Promise<Course> {
  try {
    console.log('üÜï Creating new course...')

    const newCourse = await prisma.course.create({
      data: {
        title: data.title,
        description: data.description,
        price: data.price,
        duration: data.duration,
        level: data.level,
        features: data.features,
      },
      select: {
        id: true,
        title: true,
        description: true,
        price: true,
        duration: true,
        level: true,
        features: true,
        createdAt: true,
      }
    })

    console.log(`‚úÖ Course created: ${newCourse.title}`)

    return {
      id: newCourse.id,
      title: newCourse.title,
      description: newCourse.description,
      price: newCourse.price,
      duration: newCourse.duration,
      level: newCourse.level || undefined,
      features: newCourse.features || [],
      createdAt: newCourse.createdAt,
    }

  } catch (error) {
    console.error('‚ùå Error creating course:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—É—Ä—Å')
  }
}

/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –∫—É—Ä—Å (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
 */
export async function deleteCourse(id: string): Promise<boolean> {
  try {
    console.log(`üóëÔ∏è Deleting course: ${id}`)

    await prisma.course.delete({
      where: { id }
    })

    console.log(`‚úÖ Course deleted: ${id}`)
    return true

  } catch (error) {
    console.error(`‚ùå Error deleting course ${id}:`, error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫—É—Ä—Å')
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É—Ä—Å—ñ–≤
 */
export async function getCoursesCount(filters?: CourseFilters): Promise<number> {
  try {
    console.log('üìä Counting courses...')
    
    const whereClause: WhereClause = {}

    if (filters?.level) {
      whereClause.level = filters.level
    }

    if (filters?.minPrice !== undefined || filters?.maxPrice !== undefined) {
      whereClause.price = {}
      if (filters.minPrice !== undefined) {
        whereClause.price.gte = filters.minPrice
      }
      if (filters.maxPrice !== undefined) {
        whereClause.price.lte = filters.maxPrice
      }
    }

    const count = await prisma.course.count({
      where: whereClause
    })

    console.log(`‚úÖ Total courses: ${count}`)
    return count

  } catch (error) {
    console.error('‚ùå Error counting courses:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—É—Ä—Å–∏')
  }
}